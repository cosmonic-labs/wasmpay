// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/ledger/v1/bank_service.proto

package ledgerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	ledgerv1 "github.com/cosmonic-labs/wasmpay/ledger/internal/api/ledgerv1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BankServiceName is the fully-qualified name of the BankService service.
	BankServiceName = "api.ledger.v1.BankService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BankServiceGetBankProcedure is the fully-qualified name of the BankService's GetBank RPC.
	BankServiceGetBankProcedure = "/api.ledger.v1.BankService/GetBank"
	// BankServiceListBanksProcedure is the fully-qualified name of the BankService's ListBanks RPC.
	BankServiceListBanksProcedure = "/api.ledger.v1.BankService/ListBanks"
	// BankServiceCreateBankProcedure is the fully-qualified name of the BankService's CreateBank RPC.
	BankServiceCreateBankProcedure = "/api.ledger.v1.BankService/CreateBank"
	// BankServiceDeleteBankProcedure is the fully-qualified name of the BankService's DeleteBank RPC.
	BankServiceDeleteBankProcedure = "/api.ledger.v1.BankService/DeleteBank"
)

// BankServiceClient is a client for the api.ledger.v1.BankService service.
type BankServiceClient interface {
	// Bank entity operations
	//
	// Get Bank by id
	GetBank(context.Context, *connect.Request[ledgerv1.GetBankRequest]) (*connect.Response[ledgerv1.GetBankResponse], error)
	// List Banks
	ListBanks(context.Context, *connect.Request[ledgerv1.ListBanksRequest]) (*connect.Response[ledgerv1.ListBanksResponse], error)
	// Create new Banks
	CreateBank(context.Context, *connect.Request[ledgerv1.CreateBankRequest]) (*connect.Response[ledgerv1.CreateBankResponse], error)
	// Deleting existing Banks
	DeleteBank(context.Context, *connect.Request[ledgerv1.DeleteBankRequest]) (*connect.Response[ledgerv1.DeleteBankResponse], error)
}

// NewBankServiceClient constructs a client for the api.ledger.v1.BankService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBankServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BankServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bankServiceMethods := ledgerv1.File_api_ledger_v1_bank_service_proto.Services().ByName("BankService").Methods()
	return &bankServiceClient{
		getBank: connect.NewClient[ledgerv1.GetBankRequest, ledgerv1.GetBankResponse](
			httpClient,
			baseURL+BankServiceGetBankProcedure,
			connect.WithSchema(bankServiceMethods.ByName("GetBank")),
			connect.WithClientOptions(opts...),
		),
		listBanks: connect.NewClient[ledgerv1.ListBanksRequest, ledgerv1.ListBanksResponse](
			httpClient,
			baseURL+BankServiceListBanksProcedure,
			connect.WithSchema(bankServiceMethods.ByName("ListBanks")),
			connect.WithClientOptions(opts...),
		),
		createBank: connect.NewClient[ledgerv1.CreateBankRequest, ledgerv1.CreateBankResponse](
			httpClient,
			baseURL+BankServiceCreateBankProcedure,
			connect.WithSchema(bankServiceMethods.ByName("CreateBank")),
			connect.WithClientOptions(opts...),
		),
		deleteBank: connect.NewClient[ledgerv1.DeleteBankRequest, ledgerv1.DeleteBankResponse](
			httpClient,
			baseURL+BankServiceDeleteBankProcedure,
			connect.WithSchema(bankServiceMethods.ByName("DeleteBank")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bankServiceClient implements BankServiceClient.
type bankServiceClient struct {
	getBank    *connect.Client[ledgerv1.GetBankRequest, ledgerv1.GetBankResponse]
	listBanks  *connect.Client[ledgerv1.ListBanksRequest, ledgerv1.ListBanksResponse]
	createBank *connect.Client[ledgerv1.CreateBankRequest, ledgerv1.CreateBankResponse]
	deleteBank *connect.Client[ledgerv1.DeleteBankRequest, ledgerv1.DeleteBankResponse]
}

// GetBank calls api.ledger.v1.BankService.GetBank.
func (c *bankServiceClient) GetBank(ctx context.Context, req *connect.Request[ledgerv1.GetBankRequest]) (*connect.Response[ledgerv1.GetBankResponse], error) {
	return c.getBank.CallUnary(ctx, req)
}

// ListBanks calls api.ledger.v1.BankService.ListBanks.
func (c *bankServiceClient) ListBanks(ctx context.Context, req *connect.Request[ledgerv1.ListBanksRequest]) (*connect.Response[ledgerv1.ListBanksResponse], error) {
	return c.listBanks.CallUnary(ctx, req)
}

// CreateBank calls api.ledger.v1.BankService.CreateBank.
func (c *bankServiceClient) CreateBank(ctx context.Context, req *connect.Request[ledgerv1.CreateBankRequest]) (*connect.Response[ledgerv1.CreateBankResponse], error) {
	return c.createBank.CallUnary(ctx, req)
}

// DeleteBank calls api.ledger.v1.BankService.DeleteBank.
func (c *bankServiceClient) DeleteBank(ctx context.Context, req *connect.Request[ledgerv1.DeleteBankRequest]) (*connect.Response[ledgerv1.DeleteBankResponse], error) {
	return c.deleteBank.CallUnary(ctx, req)
}

// BankServiceHandler is an implementation of the api.ledger.v1.BankService service.
type BankServiceHandler interface {
	// Bank entity operations
	//
	// Get Bank by id
	GetBank(context.Context, *connect.Request[ledgerv1.GetBankRequest]) (*connect.Response[ledgerv1.GetBankResponse], error)
	// List Banks
	ListBanks(context.Context, *connect.Request[ledgerv1.ListBanksRequest]) (*connect.Response[ledgerv1.ListBanksResponse], error)
	// Create new Banks
	CreateBank(context.Context, *connect.Request[ledgerv1.CreateBankRequest]) (*connect.Response[ledgerv1.CreateBankResponse], error)
	// Deleting existing Banks
	DeleteBank(context.Context, *connect.Request[ledgerv1.DeleteBankRequest]) (*connect.Response[ledgerv1.DeleteBankResponse], error)
}

// NewBankServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBankServiceHandler(svc BankServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bankServiceMethods := ledgerv1.File_api_ledger_v1_bank_service_proto.Services().ByName("BankService").Methods()
	bankServiceGetBankHandler := connect.NewUnaryHandler(
		BankServiceGetBankProcedure,
		svc.GetBank,
		connect.WithSchema(bankServiceMethods.ByName("GetBank")),
		connect.WithHandlerOptions(opts...),
	)
	bankServiceListBanksHandler := connect.NewUnaryHandler(
		BankServiceListBanksProcedure,
		svc.ListBanks,
		connect.WithSchema(bankServiceMethods.ByName("ListBanks")),
		connect.WithHandlerOptions(opts...),
	)
	bankServiceCreateBankHandler := connect.NewUnaryHandler(
		BankServiceCreateBankProcedure,
		svc.CreateBank,
		connect.WithSchema(bankServiceMethods.ByName("CreateBank")),
		connect.WithHandlerOptions(opts...),
	)
	bankServiceDeleteBankHandler := connect.NewUnaryHandler(
		BankServiceDeleteBankProcedure,
		svc.DeleteBank,
		connect.WithSchema(bankServiceMethods.ByName("DeleteBank")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.ledger.v1.BankService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BankServiceGetBankProcedure:
			bankServiceGetBankHandler.ServeHTTP(w, r)
		case BankServiceListBanksProcedure:
			bankServiceListBanksHandler.ServeHTTP(w, r)
		case BankServiceCreateBankProcedure:
			bankServiceCreateBankHandler.ServeHTTP(w, r)
		case BankServiceDeleteBankProcedure:
			bankServiceDeleteBankHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBankServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBankServiceHandler struct{}

func (UnimplementedBankServiceHandler) GetBank(context.Context, *connect.Request[ledgerv1.GetBankRequest]) (*connect.Response[ledgerv1.GetBankResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ledger.v1.BankService.GetBank is not implemented"))
}

func (UnimplementedBankServiceHandler) ListBanks(context.Context, *connect.Request[ledgerv1.ListBanksRequest]) (*connect.Response[ledgerv1.ListBanksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ledger.v1.BankService.ListBanks is not implemented"))
}

func (UnimplementedBankServiceHandler) CreateBank(context.Context, *connect.Request[ledgerv1.CreateBankRequest]) (*connect.Response[ledgerv1.CreateBankResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ledger.v1.BankService.CreateBank is not implemented"))
}

func (UnimplementedBankServiceHandler) DeleteBank(context.Context, *connect.Request[ledgerv1.DeleteBankRequest]) (*connect.Response[ledgerv1.DeleteBankResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ledger.v1.BankService.DeleteBank is not implemented"))
}
