// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/ledger/v1/transaction_service.proto

package ledgerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	ledgerv1 "github.com/cosmonic-labs/wasmpay/ledger/internal/api/ledgerv1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TransactionServiceName is the fully-qualified name of the TransactionService service.
	TransactionServiceName = "api.ledger.v1.TransactionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TransactionServiceStoreTransactionProcedure is the fully-qualified name of the
	// TransactionService's StoreTransaction RPC.
	TransactionServiceStoreTransactionProcedure = "/api.ledger.v1.TransactionService/StoreTransaction"
	// TransactionServiceListTransactionsProcedure is the fully-qualified name of the
	// TransactionService's ListTransactions RPC.
	TransactionServiceListTransactionsProcedure = "/api.ledger.v1.TransactionService/ListTransactions"
)

// TransactionServiceClient is a client for the api.ledger.v1.TransactionService service.
type TransactionServiceClient interface {
	StoreTransaction(context.Context, *connect.Request[ledgerv1.StoreTransactionRequest]) (*connect.Response[ledgerv1.StoreTransactionResponse], error)
	ListTransactions(context.Context, *connect.Request[ledgerv1.ListTransactionsRequest]) (*connect.Response[ledgerv1.ListTransactionsResponse], error)
}

// NewTransactionServiceClient constructs a client for the api.ledger.v1.TransactionService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TransactionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	transactionServiceMethods := ledgerv1.File_api_ledger_v1_transaction_service_proto.Services().ByName("TransactionService").Methods()
	return &transactionServiceClient{
		storeTransaction: connect.NewClient[ledgerv1.StoreTransactionRequest, ledgerv1.StoreTransactionResponse](
			httpClient,
			baseURL+TransactionServiceStoreTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("StoreTransaction")),
			connect.WithClientOptions(opts...),
		),
		listTransactions: connect.NewClient[ledgerv1.ListTransactionsRequest, ledgerv1.ListTransactionsResponse](
			httpClient,
			baseURL+TransactionServiceListTransactionsProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("ListTransactions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// transactionServiceClient implements TransactionServiceClient.
type transactionServiceClient struct {
	storeTransaction *connect.Client[ledgerv1.StoreTransactionRequest, ledgerv1.StoreTransactionResponse]
	listTransactions *connect.Client[ledgerv1.ListTransactionsRequest, ledgerv1.ListTransactionsResponse]
}

// StoreTransaction calls api.ledger.v1.TransactionService.StoreTransaction.
func (c *transactionServiceClient) StoreTransaction(ctx context.Context, req *connect.Request[ledgerv1.StoreTransactionRequest]) (*connect.Response[ledgerv1.StoreTransactionResponse], error) {
	return c.storeTransaction.CallUnary(ctx, req)
}

// ListTransactions calls api.ledger.v1.TransactionService.ListTransactions.
func (c *transactionServiceClient) ListTransactions(ctx context.Context, req *connect.Request[ledgerv1.ListTransactionsRequest]) (*connect.Response[ledgerv1.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// TransactionServiceHandler is an implementation of the api.ledger.v1.TransactionService service.
type TransactionServiceHandler interface {
	StoreTransaction(context.Context, *connect.Request[ledgerv1.StoreTransactionRequest]) (*connect.Response[ledgerv1.StoreTransactionResponse], error)
	ListTransactions(context.Context, *connect.Request[ledgerv1.ListTransactionsRequest]) (*connect.Response[ledgerv1.ListTransactionsResponse], error)
}

// NewTransactionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionServiceHandler(svc TransactionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transactionServiceMethods := ledgerv1.File_api_ledger_v1_transaction_service_proto.Services().ByName("TransactionService").Methods()
	transactionServiceStoreTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceStoreTransactionProcedure,
		svc.StoreTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("StoreTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceListTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceListTransactionsProcedure,
		svc.ListTransactions,
		connect.WithSchema(transactionServiceMethods.ByName("ListTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.ledger.v1.TransactionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransactionServiceStoreTransactionProcedure:
			transactionServiceStoreTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceListTransactionsProcedure:
			transactionServiceListTransactionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransactionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionServiceHandler struct{}

func (UnimplementedTransactionServiceHandler) StoreTransaction(context.Context, *connect.Request[ledgerv1.StoreTransactionRequest]) (*connect.Response[ledgerv1.StoreTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ledger.v1.TransactionService.StoreTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) ListTransactions(context.Context, *connect.Request[ledgerv1.ListTransactionsRequest]) (*connect.Response[ledgerv1.ListTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ledger.v1.TransactionService.ListTransactions is not implemented"))
}
