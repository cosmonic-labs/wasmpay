// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/transfer/v1/transfer_service.proto

package transferv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	transferv1 "github.com/cosmonic-labs/wasmpay/ledger/internal/api/transferv1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TransferServiceName is the fully-qualified name of the TransferService service.
	TransferServiceName = "api.transfer.v1.TransferService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TransferServiceTransferProcedure is the fully-qualified name of the TransferService's Transfer
	// RPC.
	TransferServiceTransferProcedure = "/api.transfer.v1.TransferService/Transfer"
)

// TransferServiceClient is a client for the api.transfer.v1.TransferService service.
type TransferServiceClient interface {
	Transfer(context.Context, *connect.Request[transferv1.TransferRequest]) (*connect.Response[transferv1.TransferResponse], error)
}

// NewTransferServiceClient constructs a client for the api.transfer.v1.TransferService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransferServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TransferServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	transferServiceMethods := transferv1.File_api_transfer_v1_transfer_service_proto.Services().ByName("TransferService").Methods()
	return &transferServiceClient{
		transfer: connect.NewClient[transferv1.TransferRequest, transferv1.TransferResponse](
			httpClient,
			baseURL+TransferServiceTransferProcedure,
			connect.WithSchema(transferServiceMethods.ByName("Transfer")),
			connect.WithClientOptions(opts...),
		),
	}
}

// transferServiceClient implements TransferServiceClient.
type transferServiceClient struct {
	transfer *connect.Client[transferv1.TransferRequest, transferv1.TransferResponse]
}

// Transfer calls api.transfer.v1.TransferService.Transfer.
func (c *transferServiceClient) Transfer(ctx context.Context, req *connect.Request[transferv1.TransferRequest]) (*connect.Response[transferv1.TransferResponse], error) {
	return c.transfer.CallUnary(ctx, req)
}

// TransferServiceHandler is an implementation of the api.transfer.v1.TransferService service.
type TransferServiceHandler interface {
	Transfer(context.Context, *connect.Request[transferv1.TransferRequest]) (*connect.Response[transferv1.TransferResponse], error)
}

// NewTransferServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransferServiceHandler(svc TransferServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transferServiceMethods := transferv1.File_api_transfer_v1_transfer_service_proto.Services().ByName("TransferService").Methods()
	transferServiceTransferHandler := connect.NewUnaryHandler(
		TransferServiceTransferProcedure,
		svc.Transfer,
		connect.WithSchema(transferServiceMethods.ByName("Transfer")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.transfer.v1.TransferService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransferServiceTransferProcedure:
			transferServiceTransferHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransferServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransferServiceHandler struct{}

func (UnimplementedTransferServiceHandler) Transfer(context.Context, *connect.Request[transferv1.TransferRequest]) (*connect.Response[transferv1.TransferResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.transfer.v1.TransferService.Transfer is not implemented"))
}
