// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/ledger/onboard/v1/onboard_service.proto

package onboardv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	onboardv1 "github.com/cosmonic-labs/wasmpay/ledger/internal/rpc/onboardv1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OnboardServiceName is the fully-qualified name of the OnboardService service.
	OnboardServiceName = "proto.ledger.onboard.v1.OnboardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OnboardServiceGetBankProcedure is the fully-qualified name of the OnboardService's GetBank RPC.
	OnboardServiceGetBankProcedure = "/proto.ledger.onboard.v1.OnboardService/GetBank"
	// OnboardServiceListBanksProcedure is the fully-qualified name of the OnboardService's ListBanks
	// RPC.
	OnboardServiceListBanksProcedure = "/proto.ledger.onboard.v1.OnboardService/ListBanks"
	// OnboardServiceCreateBankProcedure is the fully-qualified name of the OnboardService's CreateBank
	// RPC.
	OnboardServiceCreateBankProcedure = "/proto.ledger.onboard.v1.OnboardService/CreateBank"
	// OnboardServiceDeleteBankProcedure is the fully-qualified name of the OnboardService's DeleteBank
	// RPC.
	OnboardServiceDeleteBankProcedure = "/proto.ledger.onboard.v1.OnboardService/DeleteBank"
	// OnboardServiceGetCustomerProcedure is the fully-qualified name of the OnboardService's
	// GetCustomer RPC.
	OnboardServiceGetCustomerProcedure = "/proto.ledger.onboard.v1.OnboardService/GetCustomer"
	// OnboardServiceListCustomersProcedure is the fully-qualified name of the OnboardService's
	// ListCustomers RPC.
	OnboardServiceListCustomersProcedure = "/proto.ledger.onboard.v1.OnboardService/ListCustomers"
	// OnboardServiceCreateCustomerProcedure is the fully-qualified name of the OnboardService's
	// CreateCustomer RPC.
	OnboardServiceCreateCustomerProcedure = "/proto.ledger.onboard.v1.OnboardService/CreateCustomer"
	// OnboardServiceDeleteCustomerProcedure is the fully-qualified name of the OnboardService's
	// DeleteCustomer RPC.
	OnboardServiceDeleteCustomerProcedure = "/proto.ledger.onboard.v1.OnboardService/DeleteCustomer"
)

// OnboardServiceClient is a client for the proto.ledger.onboard.v1.OnboardService service.
type OnboardServiceClient interface {
	// Bank entity operations
	//
	// Get Bank by id
	GetBank(context.Context, *connect.Request[onboardv1.GetBankRequest]) (*connect.Response[onboardv1.GetBankResponse], error)
	// List Banks
	ListBanks(context.Context, *connect.Request[onboardv1.ListBanksRequest]) (*connect.Response[onboardv1.ListBanksResponse], error)
	// Create new Banks
	CreateBank(context.Context, *connect.Request[onboardv1.CreateBankRequest]) (*connect.Response[onboardv1.CreateBankResponse], error)
	// Deleting existing Banks
	DeleteBank(context.Context, *connect.Request[onboardv1.DeleteBankRequest]) (*connect.Response[onboardv1.DeleteBankResponse], error)
	// Customer entity operations
	//
	// Get Customer by id
	GetCustomer(context.Context, *connect.Request[onboardv1.GetCustomerRequest]) (*connect.Response[onboardv1.GetCustomerResponse], error)
	// List Customers
	ListCustomers(context.Context, *connect.Request[onboardv1.ListCustomersRequest]) (*connect.Response[onboardv1.ListCustomersResponse], error)
	// Create new Customers
	CreateCustomer(context.Context, *connect.Request[onboardv1.CreateCustomerRequest]) (*connect.Response[onboardv1.CreateCustomerResponse], error)
	// Deleting existing Customers
	DeleteCustomer(context.Context, *connect.Request[onboardv1.DeleteCustomerRequest]) (*connect.Response[onboardv1.DeleteCustomerResponse], error)
}

// NewOnboardServiceClient constructs a client for the proto.ledger.onboard.v1.OnboardService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOnboardServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OnboardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	onboardServiceMethods := onboardv1.File_proto_ledger_onboard_v1_onboard_service_proto.Services().ByName("OnboardService").Methods()
	return &onboardServiceClient{
		getBank: connect.NewClient[onboardv1.GetBankRequest, onboardv1.GetBankResponse](
			httpClient,
			baseURL+OnboardServiceGetBankProcedure,
			connect.WithSchema(onboardServiceMethods.ByName("GetBank")),
			connect.WithClientOptions(opts...),
		),
		listBanks: connect.NewClient[onboardv1.ListBanksRequest, onboardv1.ListBanksResponse](
			httpClient,
			baseURL+OnboardServiceListBanksProcedure,
			connect.WithSchema(onboardServiceMethods.ByName("ListBanks")),
			connect.WithClientOptions(opts...),
		),
		createBank: connect.NewClient[onboardv1.CreateBankRequest, onboardv1.CreateBankResponse](
			httpClient,
			baseURL+OnboardServiceCreateBankProcedure,
			connect.WithSchema(onboardServiceMethods.ByName("CreateBank")),
			connect.WithClientOptions(opts...),
		),
		deleteBank: connect.NewClient[onboardv1.DeleteBankRequest, onboardv1.DeleteBankResponse](
			httpClient,
			baseURL+OnboardServiceDeleteBankProcedure,
			connect.WithSchema(onboardServiceMethods.ByName("DeleteBank")),
			connect.WithClientOptions(opts...),
		),
		getCustomer: connect.NewClient[onboardv1.GetCustomerRequest, onboardv1.GetCustomerResponse](
			httpClient,
			baseURL+OnboardServiceGetCustomerProcedure,
			connect.WithSchema(onboardServiceMethods.ByName("GetCustomer")),
			connect.WithClientOptions(opts...),
		),
		listCustomers: connect.NewClient[onboardv1.ListCustomersRequest, onboardv1.ListCustomersResponse](
			httpClient,
			baseURL+OnboardServiceListCustomersProcedure,
			connect.WithSchema(onboardServiceMethods.ByName("ListCustomers")),
			connect.WithClientOptions(opts...),
		),
		createCustomer: connect.NewClient[onboardv1.CreateCustomerRequest, onboardv1.CreateCustomerResponse](
			httpClient,
			baseURL+OnboardServiceCreateCustomerProcedure,
			connect.WithSchema(onboardServiceMethods.ByName("CreateCustomer")),
			connect.WithClientOptions(opts...),
		),
		deleteCustomer: connect.NewClient[onboardv1.DeleteCustomerRequest, onboardv1.DeleteCustomerResponse](
			httpClient,
			baseURL+OnboardServiceDeleteCustomerProcedure,
			connect.WithSchema(onboardServiceMethods.ByName("DeleteCustomer")),
			connect.WithClientOptions(opts...),
		),
	}
}

// onboardServiceClient implements OnboardServiceClient.
type onboardServiceClient struct {
	getBank        *connect.Client[onboardv1.GetBankRequest, onboardv1.GetBankResponse]
	listBanks      *connect.Client[onboardv1.ListBanksRequest, onboardv1.ListBanksResponse]
	createBank     *connect.Client[onboardv1.CreateBankRequest, onboardv1.CreateBankResponse]
	deleteBank     *connect.Client[onboardv1.DeleteBankRequest, onboardv1.DeleteBankResponse]
	getCustomer    *connect.Client[onboardv1.GetCustomerRequest, onboardv1.GetCustomerResponse]
	listCustomers  *connect.Client[onboardv1.ListCustomersRequest, onboardv1.ListCustomersResponse]
	createCustomer *connect.Client[onboardv1.CreateCustomerRequest, onboardv1.CreateCustomerResponse]
	deleteCustomer *connect.Client[onboardv1.DeleteCustomerRequest, onboardv1.DeleteCustomerResponse]
}

// GetBank calls proto.ledger.onboard.v1.OnboardService.GetBank.
func (c *onboardServiceClient) GetBank(ctx context.Context, req *connect.Request[onboardv1.GetBankRequest]) (*connect.Response[onboardv1.GetBankResponse], error) {
	return c.getBank.CallUnary(ctx, req)
}

// ListBanks calls proto.ledger.onboard.v1.OnboardService.ListBanks.
func (c *onboardServiceClient) ListBanks(ctx context.Context, req *connect.Request[onboardv1.ListBanksRequest]) (*connect.Response[onboardv1.ListBanksResponse], error) {
	return c.listBanks.CallUnary(ctx, req)
}

// CreateBank calls proto.ledger.onboard.v1.OnboardService.CreateBank.
func (c *onboardServiceClient) CreateBank(ctx context.Context, req *connect.Request[onboardv1.CreateBankRequest]) (*connect.Response[onboardv1.CreateBankResponse], error) {
	return c.createBank.CallUnary(ctx, req)
}

// DeleteBank calls proto.ledger.onboard.v1.OnboardService.DeleteBank.
func (c *onboardServiceClient) DeleteBank(ctx context.Context, req *connect.Request[onboardv1.DeleteBankRequest]) (*connect.Response[onboardv1.DeleteBankResponse], error) {
	return c.deleteBank.CallUnary(ctx, req)
}

// GetCustomer calls proto.ledger.onboard.v1.OnboardService.GetCustomer.
func (c *onboardServiceClient) GetCustomer(ctx context.Context, req *connect.Request[onboardv1.GetCustomerRequest]) (*connect.Response[onboardv1.GetCustomerResponse], error) {
	return c.getCustomer.CallUnary(ctx, req)
}

// ListCustomers calls proto.ledger.onboard.v1.OnboardService.ListCustomers.
func (c *onboardServiceClient) ListCustomers(ctx context.Context, req *connect.Request[onboardv1.ListCustomersRequest]) (*connect.Response[onboardv1.ListCustomersResponse], error) {
	return c.listCustomers.CallUnary(ctx, req)
}

// CreateCustomer calls proto.ledger.onboard.v1.OnboardService.CreateCustomer.
func (c *onboardServiceClient) CreateCustomer(ctx context.Context, req *connect.Request[onboardv1.CreateCustomerRequest]) (*connect.Response[onboardv1.CreateCustomerResponse], error) {
	return c.createCustomer.CallUnary(ctx, req)
}

// DeleteCustomer calls proto.ledger.onboard.v1.OnboardService.DeleteCustomer.
func (c *onboardServiceClient) DeleteCustomer(ctx context.Context, req *connect.Request[onboardv1.DeleteCustomerRequest]) (*connect.Response[onboardv1.DeleteCustomerResponse], error) {
	return c.deleteCustomer.CallUnary(ctx, req)
}

// OnboardServiceHandler is an implementation of the proto.ledger.onboard.v1.OnboardService service.
type OnboardServiceHandler interface {
	// Bank entity operations
	//
	// Get Bank by id
	GetBank(context.Context, *connect.Request[onboardv1.GetBankRequest]) (*connect.Response[onboardv1.GetBankResponse], error)
	// List Banks
	ListBanks(context.Context, *connect.Request[onboardv1.ListBanksRequest]) (*connect.Response[onboardv1.ListBanksResponse], error)
	// Create new Banks
	CreateBank(context.Context, *connect.Request[onboardv1.CreateBankRequest]) (*connect.Response[onboardv1.CreateBankResponse], error)
	// Deleting existing Banks
	DeleteBank(context.Context, *connect.Request[onboardv1.DeleteBankRequest]) (*connect.Response[onboardv1.DeleteBankResponse], error)
	// Customer entity operations
	//
	// Get Customer by id
	GetCustomer(context.Context, *connect.Request[onboardv1.GetCustomerRequest]) (*connect.Response[onboardv1.GetCustomerResponse], error)
	// List Customers
	ListCustomers(context.Context, *connect.Request[onboardv1.ListCustomersRequest]) (*connect.Response[onboardv1.ListCustomersResponse], error)
	// Create new Customers
	CreateCustomer(context.Context, *connect.Request[onboardv1.CreateCustomerRequest]) (*connect.Response[onboardv1.CreateCustomerResponse], error)
	// Deleting existing Customers
	DeleteCustomer(context.Context, *connect.Request[onboardv1.DeleteCustomerRequest]) (*connect.Response[onboardv1.DeleteCustomerResponse], error)
}

// NewOnboardServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOnboardServiceHandler(svc OnboardServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	onboardServiceMethods := onboardv1.File_proto_ledger_onboard_v1_onboard_service_proto.Services().ByName("OnboardService").Methods()
	onboardServiceGetBankHandler := connect.NewUnaryHandler(
		OnboardServiceGetBankProcedure,
		svc.GetBank,
		connect.WithSchema(onboardServiceMethods.ByName("GetBank")),
		connect.WithHandlerOptions(opts...),
	)
	onboardServiceListBanksHandler := connect.NewUnaryHandler(
		OnboardServiceListBanksProcedure,
		svc.ListBanks,
		connect.WithSchema(onboardServiceMethods.ByName("ListBanks")),
		connect.WithHandlerOptions(opts...),
	)
	onboardServiceCreateBankHandler := connect.NewUnaryHandler(
		OnboardServiceCreateBankProcedure,
		svc.CreateBank,
		connect.WithSchema(onboardServiceMethods.ByName("CreateBank")),
		connect.WithHandlerOptions(opts...),
	)
	onboardServiceDeleteBankHandler := connect.NewUnaryHandler(
		OnboardServiceDeleteBankProcedure,
		svc.DeleteBank,
		connect.WithSchema(onboardServiceMethods.ByName("DeleteBank")),
		connect.WithHandlerOptions(opts...),
	)
	onboardServiceGetCustomerHandler := connect.NewUnaryHandler(
		OnboardServiceGetCustomerProcedure,
		svc.GetCustomer,
		connect.WithSchema(onboardServiceMethods.ByName("GetCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	onboardServiceListCustomersHandler := connect.NewUnaryHandler(
		OnboardServiceListCustomersProcedure,
		svc.ListCustomers,
		connect.WithSchema(onboardServiceMethods.ByName("ListCustomers")),
		connect.WithHandlerOptions(opts...),
	)
	onboardServiceCreateCustomerHandler := connect.NewUnaryHandler(
		OnboardServiceCreateCustomerProcedure,
		svc.CreateCustomer,
		connect.WithSchema(onboardServiceMethods.ByName("CreateCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	onboardServiceDeleteCustomerHandler := connect.NewUnaryHandler(
		OnboardServiceDeleteCustomerProcedure,
		svc.DeleteCustomer,
		connect.WithSchema(onboardServiceMethods.ByName("DeleteCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.ledger.onboard.v1.OnboardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OnboardServiceGetBankProcedure:
			onboardServiceGetBankHandler.ServeHTTP(w, r)
		case OnboardServiceListBanksProcedure:
			onboardServiceListBanksHandler.ServeHTTP(w, r)
		case OnboardServiceCreateBankProcedure:
			onboardServiceCreateBankHandler.ServeHTTP(w, r)
		case OnboardServiceDeleteBankProcedure:
			onboardServiceDeleteBankHandler.ServeHTTP(w, r)
		case OnboardServiceGetCustomerProcedure:
			onboardServiceGetCustomerHandler.ServeHTTP(w, r)
		case OnboardServiceListCustomersProcedure:
			onboardServiceListCustomersHandler.ServeHTTP(w, r)
		case OnboardServiceCreateCustomerProcedure:
			onboardServiceCreateCustomerHandler.ServeHTTP(w, r)
		case OnboardServiceDeleteCustomerProcedure:
			onboardServiceDeleteCustomerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOnboardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOnboardServiceHandler struct{}

func (UnimplementedOnboardServiceHandler) GetBank(context.Context, *connect.Request[onboardv1.GetBankRequest]) (*connect.Response[onboardv1.GetBankResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ledger.onboard.v1.OnboardService.GetBank is not implemented"))
}

func (UnimplementedOnboardServiceHandler) ListBanks(context.Context, *connect.Request[onboardv1.ListBanksRequest]) (*connect.Response[onboardv1.ListBanksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ledger.onboard.v1.OnboardService.ListBanks is not implemented"))
}

func (UnimplementedOnboardServiceHandler) CreateBank(context.Context, *connect.Request[onboardv1.CreateBankRequest]) (*connect.Response[onboardv1.CreateBankResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ledger.onboard.v1.OnboardService.CreateBank is not implemented"))
}

func (UnimplementedOnboardServiceHandler) DeleteBank(context.Context, *connect.Request[onboardv1.DeleteBankRequest]) (*connect.Response[onboardv1.DeleteBankResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ledger.onboard.v1.OnboardService.DeleteBank is not implemented"))
}

func (UnimplementedOnboardServiceHandler) GetCustomer(context.Context, *connect.Request[onboardv1.GetCustomerRequest]) (*connect.Response[onboardv1.GetCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ledger.onboard.v1.OnboardService.GetCustomer is not implemented"))
}

func (UnimplementedOnboardServiceHandler) ListCustomers(context.Context, *connect.Request[onboardv1.ListCustomersRequest]) (*connect.Response[onboardv1.ListCustomersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ledger.onboard.v1.OnboardService.ListCustomers is not implemented"))
}

func (UnimplementedOnboardServiceHandler) CreateCustomer(context.Context, *connect.Request[onboardv1.CreateCustomerRequest]) (*connect.Response[onboardv1.CreateCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ledger.onboard.v1.OnboardService.CreateCustomer is not implemented"))
}

func (UnimplementedOnboardServiceHandler) DeleteCustomer(context.Context, *connect.Request[onboardv1.DeleteCustomerRequest]) (*connect.Response[onboardv1.DeleteCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ledger.onboard.v1.OnboardService.DeleteCustomer is not implemented"))
}
